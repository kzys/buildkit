// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.4
// source: filesync.proto

package filesync

import (
	context "context"
	types "github.com/tonistiigi/fsutil/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileSync_DiffCopy_FullMethodName  = "/moby.filesync.v1.FileSync/DiffCopy"
	FileSync_TarStream_FullMethodName = "/moby.filesync.v1.FileSync/TarStream"
)

// FileSyncClient is the client API for FileSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSyncClient interface {
	DiffCopy(ctx context.Context, opts ...grpc.CallOption) (FileSync_DiffCopyClient, error)
	TarStream(ctx context.Context, opts ...grpc.CallOption) (FileSync_TarStreamClient, error)
}

type fileSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSyncClient(cc grpc.ClientConnInterface) FileSyncClient {
	return &fileSyncClient{cc}
}

func (c *fileSyncClient) DiffCopy(ctx context.Context, opts ...grpc.CallOption) (FileSync_DiffCopyClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSync_ServiceDesc.Streams[0], FileSync_DiffCopy_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSyncDiffCopyClient{stream}
	return x, nil
}

type FileSync_DiffCopyClient interface {
	Send(*types.Packet) error
	Recv() (*types.Packet, error)
	grpc.ClientStream
}

type fileSyncDiffCopyClient struct {
	grpc.ClientStream
}

func (x *fileSyncDiffCopyClient) Send(m *types.Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSyncDiffCopyClient) Recv() (*types.Packet, error) {
	m := new(types.Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSyncClient) TarStream(ctx context.Context, opts ...grpc.CallOption) (FileSync_TarStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSync_ServiceDesc.Streams[1], FileSync_TarStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSyncTarStreamClient{stream}
	return x, nil
}

type FileSync_TarStreamClient interface {
	Send(*types.Packet) error
	Recv() (*types.Packet, error)
	grpc.ClientStream
}

type fileSyncTarStreamClient struct {
	grpc.ClientStream
}

func (x *fileSyncTarStreamClient) Send(m *types.Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSyncTarStreamClient) Recv() (*types.Packet, error) {
	m := new(types.Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSyncServer is the server API for FileSync service.
// All implementations must embed UnimplementedFileSyncServer
// for forward compatibility
type FileSyncServer interface {
	DiffCopy(FileSync_DiffCopyServer) error
	TarStream(FileSync_TarStreamServer) error
	mustEmbedUnimplementedFileSyncServer()
}

// UnimplementedFileSyncServer must be embedded to have forward compatible implementations.
type UnimplementedFileSyncServer struct {
}

func (UnimplementedFileSyncServer) DiffCopy(FileSync_DiffCopyServer) error {
	return status.Errorf(codes.Unimplemented, "method DiffCopy not implemented")
}
func (UnimplementedFileSyncServer) TarStream(FileSync_TarStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TarStream not implemented")
}
func (UnimplementedFileSyncServer) mustEmbedUnimplementedFileSyncServer() {}

// UnsafeFileSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSyncServer will
// result in compilation errors.
type UnsafeFileSyncServer interface {
	mustEmbedUnimplementedFileSyncServer()
}

func RegisterFileSyncServer(s grpc.ServiceRegistrar, srv FileSyncServer) {
	s.RegisterService(&FileSync_ServiceDesc, srv)
}

func _FileSync_DiffCopy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServer).DiffCopy(&fileSyncDiffCopyServer{stream})
}

type FileSync_DiffCopyServer interface {
	Send(*types.Packet) error
	Recv() (*types.Packet, error)
	grpc.ServerStream
}

type fileSyncDiffCopyServer struct {
	grpc.ServerStream
}

func (x *fileSyncDiffCopyServer) Send(m *types.Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSyncDiffCopyServer) Recv() (*types.Packet, error) {
	m := new(types.Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileSync_TarStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServer).TarStream(&fileSyncTarStreamServer{stream})
}

type FileSync_TarStreamServer interface {
	Send(*types.Packet) error
	Recv() (*types.Packet, error)
	grpc.ServerStream
}

type fileSyncTarStreamServer struct {
	grpc.ServerStream
}

func (x *fileSyncTarStreamServer) Send(m *types.Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSyncTarStreamServer) Recv() (*types.Packet, error) {
	m := new(types.Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSync_ServiceDesc is the grpc.ServiceDesc for FileSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moby.filesync.v1.FileSync",
	HandlerType: (*FileSyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DiffCopy",
			Handler:       _FileSync_DiffCopy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TarStream",
			Handler:       _FileSync_TarStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "filesync.proto",
}

const (
	FileSend_DiffCopy_FullMethodName = "/moby.filesync.v1.FileSend/DiffCopy"
)

// FileSendClient is the client API for FileSend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSendClient interface {
	DiffCopy(ctx context.Context, opts ...grpc.CallOption) (FileSend_DiffCopyClient, error)
}

type fileSendClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSendClient(cc grpc.ClientConnInterface) FileSendClient {
	return &fileSendClient{cc}
}

func (c *fileSendClient) DiffCopy(ctx context.Context, opts ...grpc.CallOption) (FileSend_DiffCopyClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSend_ServiceDesc.Streams[0], FileSend_DiffCopy_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSendDiffCopyClient{stream}
	return x, nil
}

type FileSend_DiffCopyClient interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ClientStream
}

type fileSendDiffCopyClient struct {
	grpc.ClientStream
}

func (x *fileSendDiffCopyClient) Send(m *BytesMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSendDiffCopyClient) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSendServer is the server API for FileSend service.
// All implementations must embed UnimplementedFileSendServer
// for forward compatibility
type FileSendServer interface {
	DiffCopy(FileSend_DiffCopyServer) error
	mustEmbedUnimplementedFileSendServer()
}

// UnimplementedFileSendServer must be embedded to have forward compatible implementations.
type UnimplementedFileSendServer struct {
}

func (UnimplementedFileSendServer) DiffCopy(FileSend_DiffCopyServer) error {
	return status.Errorf(codes.Unimplemented, "method DiffCopy not implemented")
}
func (UnimplementedFileSendServer) mustEmbedUnimplementedFileSendServer() {}

// UnsafeFileSendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSendServer will
// result in compilation errors.
type UnsafeFileSendServer interface {
	mustEmbedUnimplementedFileSendServer()
}

func RegisterFileSendServer(s grpc.ServiceRegistrar, srv FileSendServer) {
	s.RegisterService(&FileSend_ServiceDesc, srv)
}

func _FileSend_DiffCopy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSendServer).DiffCopy(&fileSendDiffCopyServer{stream})
}

type FileSend_DiffCopyServer interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ServerStream
}

type fileSendDiffCopyServer struct {
	grpc.ServerStream
}

func (x *fileSendDiffCopyServer) Send(m *BytesMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSendDiffCopyServer) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSend_ServiceDesc is the grpc.ServiceDesc for FileSend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moby.filesync.v1.FileSend",
	HandlerType: (*FileSendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DiffCopy",
			Handler:       _FileSend_DiffCopy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "filesync.proto",
}
