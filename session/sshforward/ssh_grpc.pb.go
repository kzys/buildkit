// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.4
// source: ssh.proto

package sshforward

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SSH_CheckAgent_FullMethodName   = "/moby.sshforward.v1.SSH/CheckAgent"
	SSH_ForwardAgent_FullMethodName = "/moby.sshforward.v1.SSH/ForwardAgent"
)

// SSHClient is the client API for SSH service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSHClient interface {
	CheckAgent(ctx context.Context, in *CheckAgentRequest, opts ...grpc.CallOption) (*CheckAgentResponse, error)
	ForwardAgent(ctx context.Context, opts ...grpc.CallOption) (SSH_ForwardAgentClient, error)
}

type sSHClient struct {
	cc grpc.ClientConnInterface
}

func NewSSHClient(cc grpc.ClientConnInterface) SSHClient {
	return &sSHClient{cc}
}

func (c *sSHClient) CheckAgent(ctx context.Context, in *CheckAgentRequest, opts ...grpc.CallOption) (*CheckAgentResponse, error) {
	out := new(CheckAgentResponse)
	err := c.cc.Invoke(ctx, SSH_CheckAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSHClient) ForwardAgent(ctx context.Context, opts ...grpc.CallOption) (SSH_ForwardAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &SSH_ServiceDesc.Streams[0], SSH_ForwardAgent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sSHForwardAgentClient{stream}
	return x, nil
}

type SSH_ForwardAgentClient interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ClientStream
}

type sSHForwardAgentClient struct {
	grpc.ClientStream
}

func (x *sSHForwardAgentClient) Send(m *BytesMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sSHForwardAgentClient) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SSHServer is the server API for SSH service.
// All implementations must embed UnimplementedSSHServer
// for forward compatibility
type SSHServer interface {
	CheckAgent(context.Context, *CheckAgentRequest) (*CheckAgentResponse, error)
	ForwardAgent(SSH_ForwardAgentServer) error
	mustEmbedUnimplementedSSHServer()
}

// UnimplementedSSHServer must be embedded to have forward compatible implementations.
type UnimplementedSSHServer struct {
}

func (UnimplementedSSHServer) CheckAgent(context.Context, *CheckAgentRequest) (*CheckAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAgent not implemented")
}
func (UnimplementedSSHServer) ForwardAgent(SSH_ForwardAgentServer) error {
	return status.Errorf(codes.Unimplemented, "method ForwardAgent not implemented")
}
func (UnimplementedSSHServer) mustEmbedUnimplementedSSHServer() {}

// UnsafeSSHServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSHServer will
// result in compilation errors.
type UnsafeSSHServer interface {
	mustEmbedUnimplementedSSHServer()
}

func RegisterSSHServer(s grpc.ServiceRegistrar, srv SSHServer) {
	s.RegisterService(&SSH_ServiceDesc, srv)
}

func _SSH_CheckAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSHServer).CheckAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSH_CheckAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSHServer).CheckAgent(ctx, req.(*CheckAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSH_ForwardAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SSHServer).ForwardAgent(&sSHForwardAgentServer{stream})
}

type SSH_ForwardAgentServer interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ServerStream
}

type sSHForwardAgentServer struct {
	grpc.ServerStream
}

func (x *sSHForwardAgentServer) Send(m *BytesMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sSHForwardAgentServer) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SSH_ServiceDesc is the grpc.ServiceDesc for SSH service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSH_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moby.sshforward.v1.SSH",
	HandlerType: (*SSHServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAgent",
			Handler:    _SSH_CheckAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ForwardAgent",
			Handler:       _SSH_ForwardAgent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ssh.proto",
}
